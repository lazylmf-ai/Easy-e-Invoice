export * from './types';
export * from './server';
export * from './progress-tracker';
export { WebSocketMessage, WebSocketConnection, WebSocketServer, ProgressTracker, MessageType, ConnectionStatus, SubscriptionFilter, WebSocketConfig, WebSocketError, ConnectionLimitError, AuthenticationError, RateLimitError, MessageSizeError, DEFAULT_WEBSOCKET_CONFIG } from './types';
export { CloudflareWebSocketServer } from './server';
export { JobProgressTracker } from './progress-tracker';
export declare const createWebSocketServer: (storage: DurableObjectStorage, config?: Partial<WebSocketConfig>) => any;
export declare const createProgressTracker: (webSocketServer: WebSocketServer, storage: DurableObjectStorage) => any;
export declare const validateWebSocketMessage: (message: unknown) => message is WebSocketMessage;
export declare const isConnectionActive: (connection: WebSocketConnection) => boolean;
export declare const getConnectionUptime: (connection: WebSocketConnection) => number;
export declare const calculateProgress: (completedSteps: number, totalSteps: number) => number;
export declare const estimateTimeRemaining: (startTime: Date, currentProgress: number) => number | null;
export declare const getMalaysianTimeZone: () => string;
export declare const formatMalaysianDateTime: (date: Date) => string;
export declare const isWithinMalaysianBusinessHours: (date?: Date) => boolean;
export declare const getNotificationPriority: (messageType: MessageType) => "low" | "medium" | "high" | "critical";
export declare const shouldShowDesktopNotification: (messageType: MessageType) => boolean;
export declare const createRateLimiter: (maxRequests: number, windowMs: number) => (connectionId: string) => boolean;
export declare const createErrorMessage: (errorCode: string, message: string, recoverable?: boolean) => WebSocketMessage;
export declare const isRetryableError: (error: WebSocketError) => boolean;
export declare const createJobSubscription: (jobId: string) => SubscriptionFilter;
export declare const createOrganizationSubscription: (organizationId: string) => SubscriptionFilter;
export declare const createUserSubscription: (userId: string) => SubscriptionFilter;
export declare const createMessageTypeSubscription: (messageTypes: MessageType[]) => SubscriptionFilter;
export declare const calculateConnectionStats: (connections: WebSocketConnection[]) => {
    total: number;
    active: number;
    byOrganization: WebSocketConnection;
    averageUptime: number;
    oldestConnection: WebSocketConnection;
};
declare const _default: {
    createWebSocketServer: (storage: DurableObjectStorage, config?: Partial<WebSocketConfig>) => any;
    createProgressTracker: (webSocketServer: WebSocketServer, storage: DurableObjectStorage) => any;
    validateWebSocketMessage: (message: unknown) => message is WebSocketMessage;
    isConnectionActive: (connection: WebSocketConnection) => boolean;
    calculateProgress: (completedSteps: number, totalSteps: number) => number;
    estimateTimeRemaining: (startTime: Date, currentProgress: number) => number | null;
    getMalaysianTimeZone: () => string;
    formatMalaysianDateTime: (date: Date) => string;
    isWithinMalaysianBusinessHours: (date?: Date) => boolean;
    getNotificationPriority: (messageType: MessageType) => "low" | "medium" | "high" | "critical";
    shouldShowDesktopNotification: (messageType: MessageType) => boolean;
    createRateLimiter: (maxRequests: number, windowMs: number) => (connectionId: string) => boolean;
    createErrorMessage: (errorCode: string, message: string, recoverable?: boolean) => WebSocketMessage;
    isRetryableError: (error: WebSocketError) => boolean;
};
export default _default;
