# Security Monitoring and Dependency Updates
name: Security Monitoring

on:
  schedule:
    # Run daily at 2 AM UTC (10 AM GMT+8)
    - cron: '0 2 * * *'
  push:
    branches: [main]
    paths:
      - 'package.json'
      - 'package-lock.json'
      - '**/package.json'
      - '**/package-lock.json'
  workflow_dispatch:

env:
  NODE_VERSION: '20'

jobs:
  # Dependency vulnerability scanning
  vulnerability-scan:
    name: Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          npm audit --audit-level=low --json > audit-results.json || true
          
      - name: Upload audit results
        uses: actions/upload-artifact@v3
        with:
          name: vulnerability-scan-results
          path: audit-results.json
          retention-days: 30

      - name: Check for critical vulnerabilities
        run: |
          critical_count=$(npm audit --audit-level=critical --json | jq '.metadata.vulnerabilities.critical // 0')
          high_count=$(npm audit --audit-level=high --json | jq '.metadata.vulnerabilities.high // 0')
          
          echo "Critical vulnerabilities: $critical_count"
          echo "High vulnerabilities: $high_count"
          
          if [ "$critical_count" -gt 0 ] || [ "$high_count" -gt 5 ]; then
            echo "::error::High number of critical/high vulnerabilities found"
            exit 1
          fi

      - name: Notify team of critical vulnerabilities
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: 'ðŸš¨ Critical security vulnerabilities detected in dependencies! Please review immediately.'

  # License compliance check
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install license-checker
        run: npm install -g license-checker

      - name: Check licenses
        run: |
          license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;Unlicense' --json > license-report.json || true

      - name: Upload license report
        uses: actions/upload-artifact@v3
        with:
          name: license-compliance-report
          path: license-report.json
          retention-days: 30

  # OWASP Dependency Check
  owasp-scan:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'Easy e-Invoice'
          path: '.'
          format: 'JSON'
          out: 'dependency-check-reports'
          args: >
            --enableRetired
            --enableExperimental
            --failOnCVSS 7
            --suppression owasp-suppressions.xml

      - name: Upload OWASP scan results
        uses: actions/upload-artifact@v3
        with:
          name: owasp-dependency-scan
          path: dependency-check-reports/
          retention-days: 30

  # Code security analysis with CodeQL
  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name != 'schedule' # Skip on scheduled runs to save resources

    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript,typescript
          queries: security-and-quality

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # Container security scanning (if using Docker)
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name != 'schedule'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t easy-einvoice:latest .
        if: hashFiles('Dockerfile') != ''

      - name: Scan Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'easy-einvoice:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
        if: hashFiles('Dockerfile') != ''

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
        if: hashFiles('Dockerfile') != ''

  # Automated dependency updates
  dependency-updates:
    name: Dependency Updates
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'schedule'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.DEPENDABOT_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install npm-check-updates
        run: npm install -g npm-check-updates

      - name: Check for updates
        run: |
          ncu --jsonUpgraded > update-report.json || true

      - name: Apply patch updates
        run: |
          ncu -u --target patch
          npm install

      - name: Run tests after updates
        run: |
          npm run test:unit || true
          npm run lint || true

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.DEPENDABOT_TOKEN }}
          commit-message: 'chore: update dependencies (patch versions)'
          title: 'Automated Dependency Updates (Patch)'
          body: |
            ## Automated Dependency Updates

            This PR contains patch-level dependency updates that were automatically applied.

            ### Changes:
            - Updated dependencies to latest patch versions
            - All tests have been run
            - Linting has been applied

            ### Safety:
            - Only patch versions (bug fixes) are included
            - No breaking changes expected
            - Tests pass in CI pipeline

            Please review and merge if all checks pass.

            ---
            *This PR was created automatically by the dependency update workflow.*
          branch: chore/automated-dependency-updates
          delete-branch: true

  # Security reporting and notifications
  security-report:
    name: Security Report
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [vulnerability-scan, license-check, owasp-scan]
    if: always()

    steps:
      - name: Download scan results
        uses: actions/download-artifact@v3
        with:
          name: vulnerability-scan-results

      - name: Generate security summary
        run: |
          echo "# Daily Security Report - $(date)" > security-report.md
          echo "" >> security-report.md
          
          # Process npm audit results
          if [ -f audit-results.json ]; then
            echo "## NPM Audit Results" >> security-report.md
            total_vulns=$(jq '.metadata.vulnerabilities | add' audit-results.json 2>/dev/null || echo "0")
            echo "Total vulnerabilities found: $total_vulns" >> security-report.md
            echo "" >> security-report.md
          fi
          
          echo "Report generated at: $(date)" >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: daily-security-report
          path: security-report.md
          retention-days: 30

      - name: Post summary to Slack
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          custom_payload: |
            {
              "text": "ðŸ“Š Daily Security Report Generated",
              "attachments": [
                {
                  "color": "good",
                  "fields": [
                    {
                      "title": "Status",
                      "value": "Security scan completed",
                      "short": true
                    },
                    {
                      "title": "Date",
                      "value": "${{ github.run_id }}",
                      "short": true
                    }
                  ]
                }
              ]
            }
        if: github.event_name == 'schedule'