name: CI/CD Pipeline - Malaysian e-Invoice System

on:
  push:
    branches: [main, staging, develop]
  pull_request:
    branches: [main, staging]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '18'
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

jobs:
  # Quality Gates and Testing
  quality-gates:
    name: Quality Gates & Testing
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      matrix:
        test-type: [unit, integration, e2e, security, compliance, performance]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for Turborepo cache

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install dependencies
        run: npm ci --frozen-lockfile

      - name: Cache Turborepo
        uses: actions/cache@v3
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      # TypeScript and Linting
      - name: TypeScript Check
        if: matrix.test-type == 'unit'
        run: npm run typecheck

      - name: Lint Code
        if: matrix.test-type == 'unit'
        run: npm run lint

      # Security Scanning
      - name: Security Audit
        if: matrix.test-type == 'security'
        run: |
          npm audit --audit-level=moderate
          npx audit-ci --config .auditrc.json

      - name: Dependency Vulnerability Check
        if: matrix.test-type == 'security'
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      # Malaysian Compliance Testing
      - name: Malaysian e-Invoice Compliance
        if: matrix.test-type == 'compliance'
        run: |
          echo "ðŸ‡²ðŸ‡¾ Running Malaysian e-Invoice compliance tests..."
          npm run test:compliance
        env:
          COMPLIANCE_STRICT: 'true'
          MALAYSIAN_TIN_VALIDATION: 'enabled'
          SST_CALCULATION_STRICT: 'true'

      # Test Execution
      - name: Unit Tests
        if: matrix.test-type == 'unit'
        run: |
          npm run test:unit -- --coverage --reporter=verbose
          npm run test:unit:coverage-report

      - name: Integration Tests
        if: matrix.test-type == 'integration'
        run: npm run test:integration
        env:
          DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
          JWT_SECRET: test-secret-key-for-ci

      - name: E2E Tests
        if: matrix.test-type == 'e2e'
        run: |
          npx playwright install --with-deps
          npm run test:e2e
        env:
          BASE_URL: http://localhost:3000
          API_BASE_URL: http://localhost:8787

      - name: Performance Tests
        if: matrix.test-type == 'performance'
        run: |
          npm run test:performance
          npm run test:load
          npm run test:performance:regression
        env:
          PERFORMANCE_THRESHOLD_API: '1000'  # 1s max
          PERFORMANCE_THRESHOLD_WEB: '3000'  # 3s max
          CSV_IMPORT_THRESHOLD_MS: '50'      # 50ms max per row
          PDF_GENERATION_THRESHOLD_MS: '20'  # 20ms max per PDF
          MALAYSIAN_COMPLIANCE_SCORE_MIN: '95' # 95% minimum compliance score

      # Coverage and Quality Reports
      - name: Upload Coverage to Codecov
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

      - name: SonarCloud Scan
        if: matrix.test-type == 'unit'
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # Performance Regression Analysis
      - name: Performance Regression Check
        if: matrix.test-type == 'performance'
        run: |
          # Save current performance results
          npm run test:performance:regression -- --reporter=json > performance-current.json
          
          # Download baseline if available
          if [ -f "performance-baseline.json" ]; then
            npm run test:performance:compare
          else
            echo "No baseline found, creating new baseline"
            cp performance-current.json performance-baseline.json
          fi
        env:
          CSV_IMPORT_THRESHOLD_MS: '50'
          PDF_GENERATION_THRESHOLD_MS: '20'
          MALAYSIAN_COMPLIANCE_SCORE_MIN: '95'

      # Store Test Results
      - name: Store Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            coverage/
            test-results/
            playwright-report/
            performance-*.json
          retention-days: 30

  # Build and Package
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: quality-gates
    timeout-minutes: 20
    
    outputs:
      web-build-hash: ${{ steps.build-hash.outputs.web-hash }}
      api-build-hash: ${{ steps.build-hash.outputs.api-hash }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --frozen-lockfile

      - name: Build all packages
        run: |
          npm run build
          npm run build:api
        env:
          NODE_ENV: production

      - name: Generate build hashes
        id: build-hash
        run: |
          WEB_HASH=$(find apps/web/.next -type f -name "*.js" -o -name "*.css" | xargs sha256sum | sha256sum | cut -d' ' -f1)
          API_HASH=$(find apps/api/dist -type f -name "*.js" | xargs sha256sum | sha256sum | cut -d' ' -f1)
          echo "web-hash=$WEB_HASH" >> $GITHUB_OUTPUT
          echo "api-hash=$API_HASH" >> $GITHUB_OUTPUT

      - name: Bundle Analysis
        run: |
          npm run analyze:bundle
          npm run analyze:deps

      - name: Store Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            apps/web/.next/
            apps/api/dist/
            packages/*/dist/
          retention-days: 7

  # Security and Compliance Verification
  security-compliance:
    name: Security & Compliance Verification
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'Easy-e-Invoice'
          path: '.'
          format: 'ALL'

      - name: Malaysian Data Compliance Scan
        run: |
          echo "ðŸ‡²ðŸ‡¾ Scanning for Malaysian PDPA compliance..."
          npm run scan:pdpa-compliance
          npm run validate:data-residency
        env:
          PDPA_STRICT_MODE: 'true'
          DATA_RESIDENCY_CHECK: 'malaysia'

      - name: API Security Testing
        run: |
          npm run test:api-security
          npm run test:auth-security
        env:
          SECURITY_SCAN_DEPTH: 'comprehensive'

  # Staging Deployment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-compliance]
    if: github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Install Wrangler CLI
        run: npm install -g wrangler

      - name: Deploy API to Cloudflare Workers (Staging)
        run: |
          cd apps/api
          wrangler deploy --env staging
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Deploy Web to Vercel (Staging)
        uses: vercel/action@latest
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: apps/web

      - name: Database Migration (Staging)
        run: |
          npm run db:migrate
          npm run db:seed:staging
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}

      - name: Staging Health Check
        run: |
          npm run health-check:staging
          npm run smoke-test:staging
        env:
          STAGING_API_URL: ${{ secrets.STAGING_API_URL }}
          STAGING_WEB_URL: ${{ secrets.STAGING_WEB_URL }}

      - name: Malaysian Compliance Verification (Staging)
        run: |
          npm run verify:malaysian-compliance -- --env=staging
          npm run test:tin-validation -- --env=staging
          npm run test:sst-calculation -- --env=staging

  # Production Deployment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main' || (github.event.workflow_dispatch && github.event.inputs.environment == 'production')
    environment: 
      name: production
      url: https://easy-einvoice.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Production Deployment Gate
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: lazylmf
          minimum-approvals: 1
          issue-title: "ðŸš€ Production Deployment Approval Required"
          issue-body: |
            **Malaysian e-Invoice System - Production Deployment**
            
            ðŸ‡²ðŸ‡¾ **Compliance Status**: âœ… All Malaysian requirements validated
            ðŸ”’ **Security Status**: âœ… All security checks passed  
            ðŸ“Š **Quality Gates**: âœ… All tests passed (>90% coverage)
            
            **Deployment Details:**
            - Build Hash (Web): ${{ needs.build.outputs.web-build-hash }}
            - Build Hash (API): ${{ needs.build.outputs.api-build-hash }}
            - Environment: Production
            - Branch: ${{ github.ref }}
            
            Please review and approve this production deployment.
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Pre-deployment Database Backup
        run: |
          npm run db:backup:production
          npm run db:backup:verify
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          BACKUP_STORAGE_URL: ${{ secrets.BACKUP_STORAGE_URL }}

      - name: Blue-Green Deployment Setup
        run: |
          echo "Setting up blue-green deployment for zero downtime..."
          npm run deployment:prepare-green

      - name: Deploy API to Production (Green)
        run: |
          cd apps/api
          wrangler deploy --env production-green
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Deploy Web to Production (Green)
        uses: vercel/action@latest
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: apps/web
          vercel-args: '--prod'

      - name: Database Migration (Production)
        run: |
          npm run db:migrate:production
          npm run db:migration:verify
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}

      - name: Production Health Check (Green)
        run: |
          npm run health-check:production-green
          npm run smoke-test:production-green
          npm run load-test:production-green
        env:
          PRODUCTION_GREEN_API_URL: ${{ secrets.PRODUCTION_GREEN_API_URL }}
          PRODUCTION_GREEN_WEB_URL: ${{ secrets.PRODUCTION_GREEN_WEB_URL }}

      - name: Malaysian Compliance Final Verification
        run: |
          echo "ðŸ‡²ðŸ‡¾ Final Malaysian compliance verification..."
          npm run verify:lhdn-compliance -- --env=production
          npm run verify:pdpa-compliance -- --env=production
          npm run verify:myinvois-format -- --env=production

      - name: Switch Traffic to Green (Go Live)
        run: |
          npm run deployment:switch-to-green
          npm run deployment:verify-switch
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Post-deployment Monitoring
        run: |
          npm run monitoring:enable-alerts
          npm run monitoring:verify-metrics
        env:
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          GRAFANA_API_KEY: ${{ secrets.GRAFANA_API_KEY }}

      - name: Cleanup Blue Environment
        run: |
          sleep 300  # Wait 5 minutes for traffic verification
          npm run deployment:cleanup-blue

  # Post-deployment Verification
  post-deployment:
    name: Post-deployment Verification
    runs-on: ubuntu-latest
    needs: deploy-production
    if: success()
    
    steps:
      - name: Final System Health Check
        run: |
          curl -f "${{ secrets.PRODUCTION_API_URL }}/health" || exit 1
          curl -f "${{ secrets.PRODUCTION_WEB_URL }}" || exit 1

      - name: Performance Verification
        run: |
          npm run lighthouse -- --url="${{ secrets.PRODUCTION_WEB_URL }}" --preset=production

      - name: Malaysian Business Hours Notification
        run: |
          echo "ðŸ‡²ðŸ‡¾ Deployment completed successfully!"
          echo "Malaysian business hours notification sent."
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}


  # Rollback Trigger (Manual)
  rollback:
    name: Emergency Rollback
    runs-on: ubuntu-latest
    if: github.event.workflow_dispatch && github.event.inputs.environment == 'rollback'
    environment: production
    permissions:
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Emergency Rollback
        run: |
          echo "ðŸš¨ Emergency rollback initiated..."
          npm run deployment:rollback:emergency
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          PRODUCTION_DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}

      - name: Rollback Verification
        run: |
          npm run health-check:production
          npm run verify:rollback-success

      - name: Alert Team
        run: |
          echo "ðŸš¨ Production rollback completed. Team alerted."
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}