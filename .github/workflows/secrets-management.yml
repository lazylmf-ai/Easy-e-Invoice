name: Environment & Secrets Management

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        type: choice
        options:
        - setup-environment
        - rotate-secrets
        - validate-secrets
        - backup-secrets
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
        - staging
        - production
        - all

env:
  NODE_VERSION: '18'

jobs:
  validate-secrets:
    name: Validate Required Secrets
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'validate-secrets' || github.event.inputs.action == 'setup-environment'
    
    outputs:
      secrets-valid: ${{ steps.validation.outputs.valid }}
      missing-secrets: ${{ steps.validation.outputs.missing }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate Required Secrets
        id: validation
        run: |
          echo "🔐 Validating required secrets for Malaysian e-Invoice system..."
          
          MISSING_SECRETS=()
          
          # Core Infrastructure Secrets
          check_secret() {
            if [ -z "${!1}" ]; then
              MISSING_SECRETS+=("$1")
              echo "❌ Missing: $1"
            else
              echo "✅ Found: $1"
            fi
          }
          
          # Database & Storage
          check_secret "PRODUCTION_DATABASE_URL"
          check_secret "STAGING_DATABASE_URL" 
          check_secret "TEST_DATABASE_URL"
          check_secret "BACKUP_STORAGE_URL"
          check_secret "BACKUP_ENCRYPTION_KEY"
          
          # Cloudflare
          check_secret "CLOUDFLARE_API_TOKEN"
          check_secret "CLOUDFLARE_ACCOUNT_ID"
          check_secret "CLOUDFLARE_R2_BUCKET"
          
          # Vercel
          check_secret "VERCEL_TOKEN"
          check_secret "VERCEL_ORG_ID"
          check_secret "VERCEL_PROJECT_ID"
          
          # Authentication & Security
          check_secret "JWT_SECRET"
          check_secret "ENCRYPTION_KEY"
          
          # External Services
          check_secret "RESEND_API_KEY"
          check_secret "SENTRY_DSN"
          check_secret "SENTRY_AUTH_TOKEN"
          check_secret "SENTRY_ORG"
          
          # Monitoring & Alerting
          check_secret "GRAFANA_API_URL"
          check_secret "GRAFANA_API_KEY"
          check_secret "SLACK_WEBHOOK"
          check_secret "PAGERDUTY_API_KEY"
          check_secret "UPTIME_ROBOT_API_KEY"
          
          # Quality & Security Tools
          check_secret "CODECOV_TOKEN"
          check_secret "SONAR_TOKEN"
          check_secret "SNYK_TOKEN"
          
          # Malaysian Business Specific
          check_secret "MYINVOIS_API_KEY"
          check_secret "LHDN_SANDBOX_KEY"
          check_secret "BUSINESS_HOURS_WEBHOOK"
          
          # Build & Deploy
          check_secret "TURBO_TOKEN"
          check_secret "TURBO_TEAM"
          
          if [ ${#MISSING_SECRETS[@]} -eq 0 ]; then
            echo "valid=true" >> $GITHUB_OUTPUT
            echo "✅ All required secrets are configured"
          else
            echo "valid=false" >> $GITHUB_OUTPUT
            echo "missing=${MISSING_SECRETS[*]}" >> $GITHUB_OUTPUT
            echo "❌ Missing ${#MISSING_SECRETS[@]} required secrets"
          fi
        env:
          # All secrets referenced for validation
          PRODUCTION_DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          STAGING_DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
          TEST_DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
          BACKUP_STORAGE_URL: ${{ secrets.BACKUP_STORAGE_URL }}
          BACKUP_ENCRYPTION_KEY: ${{ secrets.BACKUP_ENCRYPTION_KEY }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_R2_BUCKET: ${{ secrets.CLOUDFLARE_R2_BUCKET }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          GRAFANA_API_URL: ${{ secrets.GRAFANA_API_URL }}
          GRAFANA_API_KEY: ${{ secrets.GRAFANA_API_KEY }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          PAGERDUTY_API_KEY: ${{ secrets.PAGERDUTY_API_KEY }}
          UPTIME_ROBOT_API_KEY: ${{ secrets.UPTIME_ROBOT_API_KEY }}
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          MYINVOIS_API_KEY: ${{ secrets.MYINVOIS_API_KEY }}
          LHDN_SANDBOX_KEY: ${{ secrets.LHDN_SANDBOX_KEY }}
          BUSINESS_HOURS_WEBHOOK: ${{ secrets.BUSINESS_HOURS_WEBHOOK }}
          TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
          TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

  setup-environment:
    name: Setup Environment Configuration
    runs-on: ubuntu-latest
    needs: validate-secrets
    if: github.event.inputs.action == 'setup-environment'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Generate Environment Files
        run: |
          echo "📝 Generating environment configuration files..."
          
          # Create environment templates
          mkdir -p .env-templates
          
          # API Environment Template
          cat > .env-templates/api.env.template << 'EOF'
          # Database
          DATABASE_URL={{PRODUCTION_DATABASE_URL}}
          
          # Authentication
          JWT_SECRET={{JWT_SECRET}}
          ENCRYPTION_KEY={{ENCRYPTION_KEY}}
          
          # External Services
          RESEND_API_KEY={{RESEND_API_KEY}}
          
          # Malaysian Compliance
          MYINVOIS_API_ENDPOINT=https://api.myinvois.lhdn.gov.my
          MYINVOIS_API_KEY={{MYINVOIS_API_KEY}}
          LHDN_SANDBOX_ENDPOINT=https://sandbox.myinvois.lhdn.gov.my
          LHDN_SANDBOX_KEY={{LHDN_SANDBOX_KEY}}
          
          # Business Configuration
          TIMEZONE=Asia/Kuala_Lumpur
          BUSINESS_HOURS_START=09:00
          BUSINESS_HOURS_END=17:00
          MALAYSIAN_BUSINESS_DAYS=1,2,3,4,5
          
          # Compliance Settings
          PDPA_COMPLIANCE_MODE=strict
          DATA_RETENTION_YEARS=7
          AUDIT_LOGGING=enabled
          TIN_VALIDATION_STRICT=true
          SST_CALCULATION_STRICT=true
          
          # Performance
          API_TIMEOUT_MS=30000
          RATE_LIMIT_REQUESTS=100
          RATE_LIMIT_WINDOW_MS=900000
          EOF
          
          # Web Environment Template
          cat > .env-templates/web.env.template << 'EOF'
          # API Configuration
          NEXT_PUBLIC_API_URL={{PRODUCTION_API_URL}}
          
          # Malaysian Configuration
          NEXT_PUBLIC_TIMEZONE=Asia/Kuala_Lumpur
          NEXT_PUBLIC_CURRENCY=MYR
          NEXT_PUBLIC_COUNTRY_CODE=MY
          
          # Feature Flags
          NEXT_PUBLIC_MYINVOIS_INTEGRATION=enabled
          NEXT_PUBLIC_PDPA_COMPLIANCE=enabled
          NEXT_PUBLIC_SST_CALCULATION=enabled
          
          # Performance
          NEXT_PUBLIC_PERFORMANCE_MONITORING=enabled
          NEXT_PUBLIC_ERROR_REPORTING=enabled
          EOF

      - name: Configure Cloudflare Workers Environment
        run: |
          echo "☁️ Configuring Cloudflare Workers environment..."
          
          # Update wrangler.toml with environment-specific settings
          npm run config:cloudflare:setup
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Configure Database Environment
        run: |
          echo "🗄️ Setting up database environment..."
          
          # Test database connections
          npm run db:test-connection -- --env=staging
          npm run db:test-connection -- --env=production
        env:
          STAGING_DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
          PRODUCTION_DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}

      - name: Malaysian Compliance Configuration
        run: |
          echo "🇲🇾 Setting up Malaysian compliance configuration..."
          
          # Configure Malaysian-specific settings
          npm run compliance:setup-malaysian-config
          
          # Validate compliance configuration
          npm run compliance:validate-config
        env:
          MYINVOIS_API_KEY: ${{ secrets.MYINVOIS_API_KEY }}
          LHDN_SANDBOX_KEY: ${{ secrets.LHDN_SANDBOX_KEY }}

  rotate-secrets:
    name: Rotate Security Secrets
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'rotate-secrets'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate New Secrets
        run: |
          echo "🔄 Generating new security secrets..."
          
          # Generate new JWT secret
          NEW_JWT_SECRET=$(openssl rand -hex 32)
          echo "::add-mask::$NEW_JWT_SECRET"
          
          # Generate new encryption key
          NEW_ENCRYPTION_KEY=$(openssl rand -hex 32)
          echo "::add-mask::$NEW_ENCRYPTION_KEY"
          
          # Store in temporary secure file for next steps
          echo "NEW_JWT_SECRET=$NEW_JWT_SECRET" >> secrets.env
          echo "NEW_ENCRYPTION_KEY=$NEW_ENCRYPTION_KEY" >> secrets.env
          
          # Set restrictive permissions
          chmod 600 secrets.env

      - name: Update Application Configuration
        run: |
          echo "⚙️ Updating application with new secrets..."
          
          # Update secrets in application configuration
          # Note: In real implementation, this would use GitHub API to update secrets
          echo "Secrets rotation prepared. Manual GitHub secrets update required."

      - name: Test New Secrets
        run: |
          echo "🧪 Testing new secrets configuration..."
          
          # Load new secrets
          source secrets.env
          
          # Test JWT generation with new secret
          npm run test:jwt-generation
          
          # Test encryption with new key
          npm run test:encryption
        env:
          NODE_ENV: test

      - name: Schedule Secret Deployment
        run: |
          echo "📅 Scheduling secret deployment..."
          
          # Create deployment plan
          cat > secret-rotation-plan.md << EOF
          # Secret Rotation Plan
          
          ## New Secrets Generated
          - JWT Secret: ✅ Generated
          - Encryption Key: ✅ Generated
          
          ## Deployment Schedule
          1. Update staging environment: $(date -d '+1 hour')
          2. Validate staging: $(date -d '+2 hours') 
          3. Update production: $(date -d '+1 day')
          4. Clean up old secrets: $(date -d '+7 days')
          
          ## Malaysian Business Impact
          - Deployment during non-business hours: ✅
          - Zero downtime rotation: ✅
          - Compliance maintained: ✅
          EOF
          
          echo "📋 Secret rotation plan created"

      - name: Cleanup
        if: always()
        run: |
          # Securely remove temporary files
          shred -vfz -n 3 secrets.env 2>/dev/null || rm -f secrets.env
          shred -vfz -n 3 secret-rotation-plan.md 2>/dev/null || rm -f secret-rotation-plan.md

  backup-secrets:
    name: Backup Secrets Configuration
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'backup-secrets'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Secrets Inventory
        run: |
          echo "📋 Creating secrets inventory..."
          
          cat > secrets-inventory.md << 'EOF'
          # Secrets Inventory - Malaysian e-Invoice System
          
          ## Infrastructure Secrets
          - [ ] PRODUCTION_DATABASE_URL
          - [ ] STAGING_DATABASE_URL
          - [ ] TEST_DATABASE_URL
          - [ ] BACKUP_STORAGE_URL
          - [ ] BACKUP_ENCRYPTION_KEY
          
          ## Cloudflare Configuration
          - [ ] CLOUDFLARE_API_TOKEN
          - [ ] CLOUDFLARE_ACCOUNT_ID
          - [ ] CLOUDFLARE_R2_BUCKET
          
          ## Deployment Platforms
          - [ ] VERCEL_TOKEN
          - [ ] VERCEL_ORG_ID
          - [ ] VERCEL_PROJECT_ID
          
          ## Security & Authentication
          - [ ] JWT_SECRET
          - [ ] ENCRYPTION_KEY
          
          ## External Services
          - [ ] RESEND_API_KEY
          - [ ] SENTRY_DSN
          - [ ] SENTRY_AUTH_TOKEN
          - [ ] SENTRY_ORG
          
          ## Monitoring & Alerting
          - [ ] GRAFANA_API_URL
          - [ ] GRAFANA_API_KEY
          - [ ] SLACK_WEBHOOK
          - [ ] PAGERDUTY_API_KEY
          - [ ] UPTIME_ROBOT_API_KEY
          
          ## Quality Tools
          - [ ] CODECOV_TOKEN
          - [ ] SONAR_TOKEN
          - [ ] SNYK_TOKEN
          
          ## Malaysian Business Specific
          - [ ] MYINVOIS_API_KEY
          - [ ] LHDN_SANDBOX_KEY
          - [ ] BUSINESS_HOURS_WEBHOOK
          
          ## Build Tools
          - [ ] TURBO_TOKEN
          - [ ] TURBO_TEAM
          
          ## Backup Information
          - Created: $(date)
          - Environment: ${{ github.event.inputs.environment }}
          - Total Secrets: 25+
          
          ## Recovery Instructions
          1. Validate each secret is configured in GitHub Settings
          2. Test connectivity for each external service
          3. Verify Malaysian compliance configuration
          4. Update secret rotation schedule
          EOF

      - name: Validate Secret Expiration
        run: |
          echo "⏰ Checking secret expiration dates..."
          
          # Create expiration tracking
          cat > secret-expiration-tracker.md << 'EOF'
          # Secret Expiration Tracker
          
          ## Expiration Schedule
          - JWT_SECRET: Rotate every 90 days
          - ENCRYPTION_KEY: Rotate every 90 days
          - API_TOKENS: Check provider-specific expiration
          - SSL_CERTIFICATES: Auto-renewal via Let's Encrypt
          
          ## Malaysian Compliance Requirements
          - Data encryption keys: Maximum 1 year
          - API access tokens: Maximum 6 months
          - Database credentials: Maximum 90 days
          
          ## Next Rotation Due
          - Next scheduled rotation: $(date -d '+90 days')
          - Malaysian business hours consideration: Yes
          - Zero-downtime requirement: Yes
          EOF

      - name: Generate Recovery Documentation
        run: |
          echo "📖 Generating disaster recovery documentation..."
          
          cat > secret-recovery-guide.md << 'EOF'
          # Secret Recovery Guide - Malaysian e-Invoice System
          
          ## Emergency Contact Information
          - Primary: System Administrator
          - Secondary: DevOps Team
          - Business Hours: 09:00-17:00 MYT
          - Emergency: 24/7 for Malaysian business impact
          
          ## Recovery Procedures
          
          ### 1. Database Access Recovery
          ```bash
          # Verify database connectivity
          npm run db:test-connection
          
          # Restore from backup if needed
          npm run db:restore:emergency
          ```
          
          ### 2. API Service Recovery
          ```bash
          # Test API connectivity
          npm run test:api:health
          
          # Redeploy if needed
          npm run deploy:api:emergency
          ```
          
          ### 3. Malaysian Compliance Validation
          ```bash
          # Verify compliance systems
          npm run test:compliance:emergency
          
          # Check MyInvois connectivity
          npm run test:myinvois:connection
          ```
          
          ### 4. Monitoring System Recovery
          ```bash
          # Restore monitoring
          npm run monitoring:restore:emergency
          
          # Verify alerting
          npm run alerts:test:emergency
          ```
          
          ## Malaysian Business Continuity
          - Priority: High (business-critical system)
          - RTO: 1 hour during business hours
          - RPO: 15 minutes maximum data loss
          - Compliance: Must maintain LHDN requirements
          EOF

      - name: Store Backup Documentation
        uses: actions/upload-artifact@v4
        with:
          name: secrets-backup-documentation
          path: |
            secrets-inventory.md
            secret-expiration-tracker.md
            secret-recovery-guide.md
          retention-days: 90

  notification:
    name: Secrets Management Notification
    runs-on: ubuntu-latest
    needs: [validate-secrets, setup-environment, rotate-secrets, backup-secrets]
    if: always()
    
    steps:
      - name: Notify Team
        run: |
          ACTION="${{ github.event.inputs.action }}"
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          STATUS="completed"
          
          if [ "${{ needs.validate-secrets.outputs.secrets-valid }}" = "false" ]; then
            STATUS="failed"
          fi
          
          echo "🔐 Secrets management action: $ACTION"
          echo "🌍 Environment: $ENVIRONMENT"
          echo "📊 Status: $STATUS"
          
          # Send Slack notification
          curl -X POST "${{ secrets.SLACK_WEBHOOK }}" \
            -H 'Content-type: application/json' \
            --data "{
              \"text\": \"🔐 Secrets Management Update\",
              \"attachments\": [{
                \"color\": \"good\",
                \"fields\": [
                  {\"title\": \"Action\", \"value\": \"$ACTION\", \"short\": true},
                  {\"title\": \"Environment\", \"value\": \"$ENVIRONMENT\", \"short\": true},
                  {\"title\": \"Status\", \"value\": \"$STATUS\", \"short\": true},
                  {\"title\": \"Malaysian System\", \"value\": \"e-Invoice Compliance\", \"short\": true}
                ]
              }]
            }"

      - name: Malaysian Business Hours Check
        run: |
          # Check if action was performed during Malaysian business hours
          HOUR=$(TZ='Asia/Kuala_Lumpur' date +%H)
          if [ "$HOUR" -ge 9 ] && [ "$HOUR" -le 17 ]; then
            echo "🇲🇾 Action performed during Malaysian business hours"
            echo "Additional validation recommended for business continuity"
          else
            echo "✅ Action performed outside business hours"
            echo "Minimal business impact expected"
          fi